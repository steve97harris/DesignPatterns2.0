                            .NET DESIGN PATTERNS
						   ----------------------
						   www.dofactory.com/net/design-patterns
						   https://github.com/anupavanm/csharp-design-patterns-for-humans#creational-design-patterns
						   https://github.com/RefactoringGuru/design-patterns-csharp/blob/master/Flyweight.Conceptual/Program.cs
						   
Creational Patterns:

Abstract Factory - Creates an instance of several families of classes. 

Builder - Seperates object construction from its representation. 

Factory Method - Creates an instance of severa; derived classes.

Prototype - A fully initialized instance to be copied or cloned. 

Singleton Pattern - A class of which only a single instance can exist. 


Structural Patterns:

Adapter - Match interfaces of different classes. 

Bridge - Seperates an object's interface from its implemention. 

Composite - A tree structure of simple and composite objects. 

Decorator - Add responsibilities to objects dynamically.

Facade - A single class that represents an entire subsystem.

Flyweight - A fine-grained instance used for efficient sharing.

Proxy - An object representing another object.


Behavioral: 

Chain of Responsibility - A way of passing a request between a chain of objects.

Command - Encapsulate a cmmand request as an object.

Iterator - A way to include language elements in a program.

Mediator - Defines simplified communication between classes.

Memento - Capture and restore an object's internal state.

Observer - A way of notifying change to a number of classes.

Visitor - Defines a new operation to a class without change.

Strategy - Encapsulates an algorithm to a subclass.

State - Alter an object's behavior when its state changes.

Template Method - Defer the exact steps of an algorithm to a subclass.